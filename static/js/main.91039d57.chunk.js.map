{"version":3,"sources":["components/CardComponent.jsx","components/CardList.jsx","components/SearchComponent.jsx","App.js","serviceWorker.js","index.js"],"names":["CardComponent","className","src","this","props","monster","id","alt","name","email","Component","CardList","monsters","map","key","SearchComponent","placeholder","searchField","handleChange","type","value","onChange","App","state","isLoading","e","setState","target","fetch","then","response","json","catch","error","console","filteredMonsters","filter","toLowerCase","includes","class","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"sQAsBeA,G,6KAjBP,OACI,yBAAKC,UAAU,wBACX,yBAAKA,UAAU,uCACf,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,eAAeC,IAAG,+BAA0BC,KAAKC,MAAMC,QAAQC,GAA7C,aACjCC,IAAI,cAER,yBAAKN,UAAU,aACX,wBAAIA,UAAU,cAAcE,KAAKC,MAAMC,QAAQG,MAC/C,uBAAGP,UAAU,aAAaE,KAAKC,MAAMC,QAAQI,c,GAZrCC,cCWbC,E,uKARP,OACI,yBAAKV,UAAU,OACVE,KAAKC,MAAMQ,SAASC,KAAI,SAAAR,GAAO,OAAI,kBAAC,EAAD,CAAeS,IAAKT,EAAQC,GAAID,QAASA,Y,GALtEK,aCYRK,EAZS,SAAC,GAA4C,IAA3CC,EAA0C,EAA1CA,YAAYC,EAA8B,EAA9BA,YAAYC,EAAkB,EAAlBA,aAC9C,OACI,2BACIC,KAAO,SACPH,YAAeA,EACff,UAAY,oBACZmB,MAASH,EACTI,SAAYH,KCiCTI,E,4MApCbC,MAAQ,CACNC,WAAY,EACZZ,SAAW,GACXK,YAAc,I,EAShBC,aAAe,SAAAO,GAAC,OAAG,EAAKC,SAAS,CAACT,YAAcQ,EAAEE,OAAOP,S,kEAPrC,IAAD,OACfjB,KAAKuB,SAAS,CAACF,WAAY,IAC3BI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAQ,OAAI,EAAKJ,SAAS,CAAEd,SAAWkB,EAASN,WAAY,OACjEQ,OAAM,SAAAC,GAAK,OAAIC,QAAQD,MAAMA,Q,+BAGxB,IAAD,EAC0B9B,KAAKoB,MAA/BX,EADA,EACAA,SAAUK,EADV,EACUA,YACXkB,EAAmBvB,EAASwB,QAAO,SAAA/B,GAAO,OAC9CA,EAAQG,KAAK6B,cAAcC,SAASrB,EAAYoB,kBAElD,OACE,yBAAKpC,UAAU,aACb,wBAAIA,UAAU,2DAAd,oBACA,kBAAC,EAAD,CACEe,YAAc,kBACdC,YAAed,KAAKoB,MAAMN,YAC1BC,aAAgBf,KAAKe,eAErBf,KAAKoB,MAAMC,UACb,wBAAIvB,UAAU,OAAd,gCACA,kBAAC,EAAD,CAAUW,SAAUuB,IAEpB,uBAAGI,MAAM,iCAAgC,uBAAGA,MAAM,+BAAlD,mBAAmG,uBAAGA,MAAM,6BAA5G,+B,GA/BU7B,aCOE8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdtB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMsB,a","file":"static/js/main.91039d57.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass CardComponent extends Component {\r\n        \r\n    render() { \r\n        return (\r\n            <div className=\"col-md-3 my-4 mycard\">\r\n                <div className=\"card text-center blue-gradient-rgba\">\r\n                <div className=\"view overlay\">\r\n                    <img className=\"card-img-top\" src={`https://robohash.org/${this.props.monster.id}?set=set2`}\r\n                    alt=\"Card cap\" />\r\n                </div>\r\n                <div className=\"card-body\">\r\n                    <h4 className=\"card-title\">{this.props.monster.name}</h4>\r\n                    <p className=\"card-text\">{this.props.monster.email}</p>\r\n                </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n \r\nexport default CardComponent;","import React, { Component } from 'react'\r\nimport CardComponent from './CardComponent'\r\nclass CardList extends Component {\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"row\">\r\n                {this.props.monsters.map(monster => <CardComponent key={monster.id} monster={monster}/>)}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CardList;","import React from 'react'\r\n\r\nconst SearchComponent = ({placeholder,searchField,handleChange}) => {\r\n    return (\r\n        <input \r\n            type = \"search\" \r\n            placeholder = {placeholder} \r\n            className = \"form-control mt-3\"\r\n            value = {searchField}\r\n            onChange = {handleChange}\r\n        />\r\n    )\r\n}\r\n\r\nexport default SearchComponent;","import React, {Component} from 'react';\nimport './App.css';\nimport CardList from './components/CardList';\nimport SearchComponent from './components/SearchComponent';\n\nclass App extends Component {\n  state = {\n    isLoading : false,\n    monsters : [],\n    searchField : \"\"\n  }\n  componentDidMount(){\n      this.setState({isLoading : true})\n      fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json())\n      .then(response => this.setState({ monsters : response,isLoading : false}))\n      .catch(error => console.error(error))\n  }\n  handleChange = e =>this.setState({searchField : e.target.value})\n  render() {\n    const {monsters ,searchField } = this.state\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    )\n    return (\n      <div className=\"container\">\n        <h1 className=\"text-center mt-5 title font-weight-bold light-blue-text\">Monsters Rolodex</h1>\n        <SearchComponent \n          placeholder = \"Search Monsters\" \n          searchField = {this.state.searchField} \n          handleChange = {this.handleChange}\n        />\n        {(this.state.isLoading) ? \n        <h3 className=\"m-5\">Fetching Monsters Detail....</h3> : \n        <CardList monsters={filteredMonsters} />\n        }\n        <p class=\"text-center white-text credit\"><i class=\"fas fa-code  yellow-text  \"></i> Developed with <i class=\"fas fa-heart  red-text  \"></i> by Md. Dilshad Alam  </p>\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport '@fortawesome/fontawesome-free/css/all.min.css'\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}